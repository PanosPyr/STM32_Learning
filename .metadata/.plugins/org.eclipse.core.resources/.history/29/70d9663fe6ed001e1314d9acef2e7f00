/*
 * stm32f446xx_spi_driver.c
 *
 *  Created on: Mar 29, 2024
 *      Author: Panospyr
 */

#include "stm32f446xx_spi_driver.h"

/*
 * Peripheral Clock setup
 */
void SPI_PeriClockControl(SPI_TypeDef *pSPIx, uint8_t En)
{
	if(En)
	{
		if(pSPIx == SPI1) RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
		else if(pSPIx == SPI2) RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
		else if(pSPIx == SPI3) RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
		else if(pSPIx == SPI4) RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
	}
	else
	{
		if(pSPIx == SPI1)
		{
			RCC->APB2RSTR |= RCC_APB2RSTR_SPI1RST;
			RCC->APB2RSTR &= ~RCC_APB2RSTR_SPI1RST;
		}
		else if(pSPIx == SPI2)
		{
			RCC->APB1RSTR |= RCC_APB1RSTR_SPI2RST;
			RCC->APB1RSTR &= ~RCC_APB1RSTR_SPI2RST;
		}
		else if(pSPIx == SPI3)
		{
			RCC->APB1RSTR |= RCC_APB1RSTR_SPI3RST;
			RCC->APB1RSTR &= ~RCC_APB1RSTR_SPI3RST;
		}
		else if(pSPIx == SPI4)
		{
			RCC->APB2RSTR |= RCC_APB2RSTR_SPI4RST;
			RCC->APB2RSTR &= ~RCC_APB2RSTR_SPI4RST;
		}
	}
}

/*
 * Init and De-init
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{

}

void SPI_DeInit(SPI_TypeDef *pSPIx)
{

}

/*
 * Data read and write
 */
void SPI_Send(SPI_TypeDef *pSPIx, uint8_t *pTxBuffer, uint32_t len)
{

}

void SPI_Receive(SPI_TypeDef *pSPIx, uint8_t *pRxBuffer, uint32_t len)
{

}

/*
 * IRQ Configuration and ISR handling
 */
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t En)
{

}

void SPI_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{

}

void SPI_IRQHandling(SPI_Handle_t *pHandle)
{

}
